<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GymRats - User Dashboard</title>
    <link rel="stylesheet" type="text/css" href="/userdashboard/userdashboard.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js"></script>
</head>

<body>
    <div class="main-navbar">
        <header>
            <!-- Header Branding -->
            <div class="brand-logo">
                <a href="/userdashboard_<%= user && user.membershipType ? user.membershipType.charAt(0).toLowerCase() : 'p' %>"
                    class="brand-name">GymRats</a>
            </div>

            <div class="nav-menu">
                <a href="/userdashboard_<%= user && user.membershipType ? user.membershipType.charAt(0).toLowerCase() : 'p' %>"
                    class="active">Home</a>
                <a href="/user_exercises">Exercises</a>
                <a href="/user_nutrition">Nutrition</a>
            </div>

            <div class="right-container">
                <div class="search-container">
                    <img src="/userdashboard/icons8-search.svg" height="18px" alt="Search Icon" />
                    <input type="text" placeholder="Search..." size="20" style="font-size: 14px;" />
                </div>

                <div class="user-profile">
                    <a href="/userprofile">
                        <% if (user && user.full_name) { %>
                        <span><%= user.full_name %></span>
                        <% } else { %>
                        <span>User</span>
                        <% } %>
                    </a>
                </div>
            </div>
            <div class="mobile-menu-icon" id="menuIcon">
                <img src="/userdashboard/menu.jpg" alt="Menu" height="25px" />
            </div>
            <div class="mobile-sidebar" id="sideNavbar">
                <a href="javascript:void(0)" class="close-button" id="closeBtn">&times;</a>
                <a href="/userdashboard_<%= user && user.membershipType ? user.membershipType.charAt(0).toLowerCase() : 'b' %>"
                    class="active">Home</a>
                <a href="/user_exercises">Exercises</a>
                <a href="/user_nutrition">Nutrition</a>
                <div class="sidebar-profile">
                    <a href="/userprofile">
                        <% if (user && user.full_name) { %>
                        <span><%= user.full_name %></span>
                        <% } else { %>
                        <span>User</span>
                        <% } %>
                    </a>
                </div>
            </div>
        </header>
    </div>

    <!-- Dashboard Hero Section -->
    <section class="dashboard-hero">
        <div class="dashboard-hero-content">
            <h1>Welcome back, <%= user.full_name %></h1>
            <p>Track your progress and stay on top of your fitness goals</p>
        </div>
    </section>




    <!-- Dashboard Content -->
    <div class="dashboard-container">
        <!-- Dashboard Overview -->
        <div class="dashboard-overview">
            <div class="overview-card">
                <div class="overview-icon">
                    <i class="fas fa-fire"></i>
                </div>
                <div class="overview-details">
                    <h3>Today's Calories</h3>
                    <p class="overview-value"><%= todayNutrition.calories_consumed || 0 %> /
                        <%= user.fitness_goals.calorie_goal %></p>
                </div>
            </div>

            <div class="overview-card">
                <div class="overview-icon">
                    <i class="fas fa-dumbbell"></i>
                </div>
                <div class="overview-details">
                    <h3>Workouts Completed</h3>
                    <p class="overview-value"><%= weeklyWorkouts.completed %> / <%= weeklyWorkouts.total %> this week
                    </p>
                </div>
            </div>

            <div class="overview-card">
                <div class="overview-icon">
                    <i class="fas fa-utensils"></i>
                </div>
                <div class="overview-details">
                    <h3>Protein Intake</h3>
                    <p class="overview-value"><%= todayNutrition.protein_consumed || 0 %>g /
                        <%= user.fitness_goals.protein_goal %>g</p>
                </div>
            </div>

            <div class="overview-card">
                <div class="overview-icon">
                    <i class="fas fa-weight"></i>
                </div>
                <div class="overview-details">
                    <h3>Current Weight</h3>
                    <p class="overview-value"><%= user.weight %> kg</p>
                </div>
            </div>
        </div>

<div class="dashboard-grid">
            <!-- Today's Workout Section -->
<div class="dashboard-card">
    <div class="card-header">
        <h2>Today's Workout: <%= todayWorkout.name || 'No Workout Scheduled' %></h2>
        <span class="badge"><%= todayWorkout.duration || 60 %> min</span>
    </div>
    <div class="workout-content">
        <% if (todayWorkout.exercises && todayWorkout.exercises.length > 0) { %>
        <div class="workout-progress">
            <div class="progress-circle">
                <svg viewBox="0 0 36 36" class="circular-chart">
                    <path class="circle-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                    <path class="circle" stroke-dasharray="<%= todayWorkout.progress || 0 %>, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                    <text x="18" y="20.35" class="percentage"><%= todayWorkout.progress || 0 %>%</text>
                </svg>
            </div>
            <p><span id="completedExercisesCount"><%= todayWorkout.completedExercises || 0 %></span> of <span id="totalExercisesCount"><%= todayWorkout.totalExercises || 0 %></span> exercises completed</p>
        </div>

        <h3>Exercises:</h3>
        <div class="exercises-container">
            <% todayWorkout.exercises.forEach((exercise, index) => { %>
            <div class="exercise-item <%= exercise.completed ? 'completed' : '' %>" data-exercise-name="<%= exercise.name %>">
                <div class="exercise-info">
                    <strong class="exercise-name"><%= exercise.name %></strong>
                    <div class="exercise-details">
                        <%= exercise.sets %> sets * 
                        <%= exercise.reps ? `${exercise.reps} reps` : `${exercise.duration} seconds` %>
                        <% if (exercise.weight) { %> (<%= exercise.weight %> kg) <% } %>
                    </div>
                </div>
                <button class="exercise-complete-btn <%= exercise.completed ? 'completed' : '' %>" 
                        data-workout-id="<%= todayWorkout.workoutPlanId %>"
                        data-exercise-name="<%= exercise.name %>"
                        <%= exercise.completed ? 'disabled' : '' %>>
                    <% if (exercise.completed) { %>
                        <i class="fas fa-check-circle"></i> Completed
                    <% } else { %>
                        <i class="fas fa-check"></i> Mark as Done
                    <% } %>
                </button>
            </div>
            <% }); %>
        </div>
        <% } else { %>
        <p>No exercises scheduled for today.</p>
        <% } %>
    </div>
</div>

            <!-- Online Class Card -->
          <div class="dashboard-card">
    <div class="card-header">
        <h2>Upcoming Class</h2>
        <% if (upcomingClass) { %>
            <span class="badge">
                <%= new Date(upcomingClass.date).toDateString() === new Date().toDateString() ? 'Today' : 'Soon' %>
            </span>
        <% } %>
    </div>
    <div class="class-content">
        <% if (upcomingClass) { %>
            <div class="class-details">
                <div class="class-time">
                    <span class="time"><%= upcomingClass.time %></span>
                    <span class="date">
                        <%= new Date(upcomingClass.date).toLocaleDateString('en-US', { 
                            weekday: 'long', 
                            month: 'long', 
                            day: 'numeric', 
                            year: 'numeric' 
                        }) %>
                    </span>
                </div>
                <div class="class-info">
                    <h3><%= upcomingClass.name %></h3>
                    <p>with <%= upcomingClass.trainerName || 'Coach' %></p>
                </div>
            </div>

            <% if (upcomingClass.description) { %>
            <div class="class-description">
                <p><%= upcomingClass.description %></p>
            </div>
            <% } %>

            <div class="class-checklist">
                <h4>Prepare for class:</h4>
                <ul>
                    <li>Clear workout space</li>
                    <li>Water bottle ready</li>
                    <li>Test camera and microphone</li>
                </ul>
            </div>

            <% if (upcomingClass.meetLink) { %>
                <a href="<%= upcomingClass.meetLink %>" class="class-join-btn" target="_blank">
                    <i class="fas fa-video"></i> Join Class
                </a>
            <% } else { %>
                <button class="class-join-btn" disabled>
                    <i class="fas fa-video"></i> Link Not Available
                </button>
            <% } %>
        <% } else { %>
            <div class="no-class-message">
                <p>No upcoming classes scheduled.</p>
                <p class="subtext">Check back later for new class schedules!</p>
            </div>
        <% } %>
    </div>
</div>
        <!-- Stats Section -->
        <div class="dashboard-wide-card">
            <div class="card-header">
                <h2>Progress Tracking</h2>
                <div class="card-actions">
                    <select id="exerciseSelect" class="select-dropdown">
                        <option value="all">All Exercises</option>
                        <% exerciseProgress.forEach(exercise => { %>
                        <option value="<%= exercise.name %>"><%= exercise.name %></option>
                        <% }); %>
                    </select>
                    <select id="timeframeSelect" class="select-dropdown">
                        <option value="month">Last Month</option>
                        <option value="3months">Last 3 Months</option>
                        <option value="6months">Last 6 Months</option>
                        <option value="year">Last Year</option>
                    </select>
                </div>
            </div>

            <div class="stats-content">
                <div class="stats-container">
                    <% exerciseProgress.forEach(exercise => { %>
                    <div class="stat-item">
                        <div class="stat-label"><%= exercise.name %></div>
                        <div class="stat-progress">
                            <div class="progress-bar">
                                <div class="progress" style="width: <%= exercise.progress %>%"></div>
                            </div>
                            <div class="stat-values">
                                <span class="current-value"><%= exercise.currentWeight %> kg</span>
                                <span class="goal-value"><%= exercise.goalWeight %> kg goal</span>
                            </div>
                        </div>
                    </div>
                    <% }); %>
                </div>

                <div class="chart-container">
                    <canvas id="exerciseChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Nutrition Section in userdashboard_p.ejs -->
        <!-- Nutrition Section -->
    <div class="dashboard-wide-card">
        <div class="card-header">
            <h2>Nutrition Tracking</h2>
        </div>
        
        <!-- Food Completion Section -->
        <div class="nutrition-food-completion">
            <h3>Today's Food Goals</h3>
            <div class="food-goals-container">
                <% if (todaysConsumedFoods && todaysConsumedFoods.length > 0) { %>
                    <% todaysConsumedFoods.forEach((food, index) => { %>
                        <div class="food-goal-item" data-food-id="<%= index %>">
                            <div class="food-info">
                                <h4><%= food.name %></h4>
                                <div class="food-macros">
                                    <span class="calories"><%= food.calories %> kcal</span>
                                    <span class="protein"><%= food.protein %>g protein</span>
                                    <% if (food.carbs) { %>
                                        <span class="carbs"><%= food.carbs %>g carbs</span>
                                    <% } %>
                                    <% if (food.fats) { %>
                                        <span class="fats"><%= food.fats %>g fats</span>
                                    <% } %>
                                </div>
                            </div>
                            <button class="food-complete-btn <%= food.consumed ? 'completed' : '' %>" 
                                    data-food-name="<%= food.name %>"
                                    data-calories="<%= food.calories %>"
                                    data-protein="<%= food.protein %>"
                                    data-carbs="<%= food.carbs || 0 %>"
                                    data-fats="<%= food.fats || 0 %>"
                                    <%= food.consumed ? 'disabled' : '' %>>
                                <% if (food.consumed) { %>
                                    <i class="fas fa-check-circle"></i> Completed
                                <% } else { %>
                                    <i class="fas fa-check"></i> Mark as Eaten
                                <% } %>
                            </button>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p>No food goals set for today. Add some foods to your nutrition plan.</p>
                <% } %>
            </div>
        </div>

        <!-- Food Log Section -->
        <div class="nutrition-food-log">
            <h3>Today's Food Log</h3>
            <div class="todays-consumption">
                <div class="consumption-stats">
                    <div class="stat">
                        <span class="label">Calories:</span>
                        <span class="value" id="todayCalories"><%= todayNutrition.calories_consumed || 0 %></span>
                        <span class="goal">/ <%= user.fitness_goals.calorie_goal %></span>
                    </div>
                    <div class="stat">
                        <span class="label">Protein:</span>
                        <span class="value" id="todayProtein"><%= todayNutrition.protein_consumed || 0 %></span>
                        <span class="goal">/ <%= user.fitness_goals.protein_goal %>g</span>
                    </div>
                </div>
            </div>
            
            <table class="food-log-table">
                <thead>
                    <tr>
                        <th>Food</th>
                        <th>Calories</th>
                        <th>Protein</th>
                        <th>Carbs</th>
                        <th>Fats</th>
                        <th>Time</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody id="consumedFoodsList">
                    <% if (todaysConsumedFoods && todaysConsumedFoods.length > 0) { %>
                        <% todaysConsumedFoods.filter(food => food.consumed).forEach(food => { %>
                            <tr class="consumed-food-item">
                                <td><%= food.name %></td>
                                <td><%= food.calories %> kcal</td>
                                <td><%= food.protein %>g</td>
                                <td><%= food.carbs || 0 %>g</td>
                                <td><%= food.fats || 0 %>g</td>
                                <td><%= food.consumedAt ? new Date(food.consumedAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) : 'Today' %></td>
                                <td><span class="completed-badge">Completed</span></td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr id="noFoodsMessage">
                            <td colspan="7">No foods consumed today yet</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

<!-- Footer -->
        <!-- <footer class="site-footer">
            <div class="footer-content">
                <div class="footer-column">
                    <h3>GymRats</h3>
                    <ul>
                        <li><a href="/about">About Us</a></li>
                        <li><a href="/trainers">Our Trainers</a></li>
                        <li><a href="/testimonial">Testimonials</a></li>
                        <li><a href="/blog">Blog</a></li>
                    </ul>
                </div>

                <div class="footer-column">
                    <h3>Resources</h3>
                    <ul>
                        <li><a href="/isolation">Exercise Guide</a></li>
                        <li><a href="/nutrition">Nutrition Tips</a></li>
                        <li><a href="/workout_plans">Workout Plans</a></li>
                        <li><a href="/calculators">Calculators</a></li>
                    </ul>
                </div>

                <div class="footer-column">
                    <h3>Support</h3>
                    <ul>
                        <li><a href="/contact">Contact Us</a></li>
                        <li><a href="/about">About us</a></li>
                        <li><a href="/terms">Terms of Service</a></li>
                        <li><a href="/privacy_policy">Privacy Policy</a></li>
                    </ul>
                </div>

                <div class="footer-column">
                    <h3>Connect With Us</h3>
                    <ul>
                        <li><a href="/login_signup">Become a Trainer</a></li>
                        <li><a href="/verifier_login">Become a Verifier</a></li>
                    </ul>
                    <div class="social-icons">
                        <a href="#"><img src="/userdashboard/icons8-facebook.svg" alt="Facebook"></a>
                        <a href="#"><img src="/userdashboard/icons8-instagram.svg" alt="Instagram"></a>
                        <a href="#"><img src="/userdashboard/icons8-youtube.svg" alt="YouTube"></a>
                    </div>
                    <p class="copyright">GymRats © 2025. All rights reserved.</p>
                </div>
            </div>
        </footer> -->


<script>
// Clean exercise completion functionality
document.addEventListener('DOMContentLoaded', function() {
    console.log('🏋️ Dashboard initialized');
    
    // Mobile menu toggle
    document.getElementById('menuIcon').addEventListener('click', function () {
        document.getElementById('sideNavbar').classList.add('open');
    });

    document.getElementById('closeBtn').addEventListener('click', function () {
        document.getElementById('sideNavbar').classList.remove('open');
    });

    // Food completion functionality
    const foodCompleteButtons = document.querySelectorAll('.food-complete-btn:not(.completed)');
    foodCompleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const foodName = this.getAttribute('data-food-name');
            const calories = parseInt(this.getAttribute('data-calories'));
            const protein = parseInt(this.getAttribute('data-protein'));
            const carbs = parseInt(this.getAttribute('data-carbs'));
            const fats = parseInt(this.getAttribute('data-fats'));
            
            const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            const today = new Date();
            const dayName = days[today.getDay()];
            
            markFoodAsConsumed(foodName, calories, protein, carbs, fats, dayName, this);
        });
    });
    
    // Exercise completion functionality
    const exerciseCompleteButtons = document.querySelectorAll('.exercise-complete-btn:not(.completed)');
    console.log('🎯 Found exercise buttons:', exerciseCompleteButtons.length);
    
    exerciseCompleteButtons.forEach((button, index) => {
        console.log(`Button ${index + 1}:`, {
            workoutId: button.getAttribute('data-workout-id'),
            exerciseName: button.getAttribute('data-exercise-name')
        });
        
        button.addEventListener('click', function() {
            const workoutId = this.getAttribute('data-workout-id');
            const exerciseName = this.getAttribute('data-exercise-name');
            console.log('🖱️ Button clicked:', { workoutId, exerciseName });
            
            if (!workoutId || workoutId === 'null') {
                console.error('❌ Missing workout ID');
                showNotification('Error: Workout ID is missing', 'error');
                return;
            }
            
            markExerciseAsDone(workoutId, exerciseName, this);
        });
    });

    // Initialize charts
    initializeCharts();
});

// Food completion function
function markFoodAsConsumed(foodName, calories, protein, carbs, fats, day, buttonElement) {
    const targetDay = day;
    
    console.log('📤 Sending to API - Food:', foodName, 'Day:', targetDay);
    
    fetch('/api/nutrition/mark-consumed', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            foodName: foodName,
            calories: calories,
            protein: protein,
            carbs: carbs,
            fats: fats,
            day: targetDay
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log('📥 API Response:', data);
        if (data.success) {
            buttonElement.innerHTML = '<i class="fas fa-check-circle"></i> Completed';
            buttonElement.classList.add('completed');
            buttonElement.disabled = true;
            updateConsumptionUI(data.updatedNutrition);
            addFoodToLog(foodName, calories, protein, carbs, fats);
            showNotification('Food marked as consumed!', 'success');
        } else {
            showNotification('Error: ' + data.message, 'error');
        }
    })
    .catch(error => {
        console.error('❌ Network error:', error);
        showNotification('Network error. Please try again.', 'error');
    });
}

// Exercise completion function
function markExerciseAsDone(workoutId, exerciseName, buttonElement) {
    console.log('🎯 Sending request to mark exercise as done:', { workoutId, exerciseName });
    
    // Show loading state
    const originalText = buttonElement.innerHTML;
    buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
    buttonElement.disabled = true;
    
    fetch('/api/exercise/complete', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            workoutPlanId: workoutId,
            exerciseName: exerciseName
        })
    })
    .then(response => {
        console.log('📥 Response status:', response.status);
        if (!response.ok) {
            return response.text().then(text => {
                console.error('❌ Response not OK:', text);
                throw new Error(`HTTP error! status: ${response.status}`);
            });
        }
        return response.json();
    })
    .then(data => {
        console.log('📥 Full API response:', data);
        
        if (data.success) {
            buttonElement.innerHTML = '<i class="fas fa-check-circle"></i> Completed';
            buttonElement.classList.add('completed');
            buttonElement.disabled = true;
            
            const exerciseItem = buttonElement.closest('.exercise-item');
            if (exerciseItem) {
                exerciseItem.classList.add('completed');
                console.log('✅ Exercise item marked as completed in UI');
            }
            
            updateWorkoutProgressUI(data);
            showNotification('Exercise completed! 🎉', 'success');
        } else {
            buttonElement.innerHTML = originalText;
            buttonElement.disabled = false;
            console.error('❌ API returned success: false', data);
            showNotification('Error: ' + (data.error || 'Failed to mark exercise'), 'error');
        }
    })
    .catch(error => {
        console.error('❌ Network error:', error);
        buttonElement.innerHTML = originalText;
        buttonElement.disabled = false;
        showNotification('Network error: ' + error.message, 'error');
    });
}

// UI update functions
function updateWorkoutProgressUI(data) {
    const circlePath = document.querySelector('.circle');
    if (circlePath) {
        circlePath.setAttribute('stroke-dasharray', `${data.progress}, 100`);
    }
    
    const percentageText = document.querySelector('.percentage');
    if (percentageText) {
        percentageText.textContent = `${data.progress}%`;
    }
    
    const completedCount = document.getElementById('completedExercisesCount');
    const totalCount = document.getElementById('totalExercisesCount');
    
    if (completedCount) completedCount.textContent = data.completedExercises;
    if (totalCount) totalCount.textContent = data.totalExercises;
}

function updateConsumptionUI(nutritionData) {
    const todayCalories = document.getElementById('todayCalories');
    const todayProtein = document.getElementById('todayProtein');
    
    if (todayCalories) todayCalories.textContent = nutritionData.calories_consumed || 0;
    if (todayProtein) todayProtein.textContent = nutritionData.protein_consumed || 0;
    
    const calorieOverview = document.querySelector('.overview-card:nth-child(1) .overview-value');
    const proteinOverview = document.querySelector('.overview-card:nth-child(3) .overview-value');
    
    if (calorieOverview) {
        calorieOverview.textContent = `${nutritionData.calories_consumed || 0} / ${nutritionData.calorie_goal || <%= user.fitness_goals.calorie_goal %>}`;
    }
    
    if (proteinOverview) {
        proteinOverview.textContent = `${nutritionData.protein_consumed || 0}g / ${nutritionData.protein_goal || <%= user.fitness_goals.protein_goal %>}g`;
    }
}

function addFoodToLog(foodName, calories, protein, carbs, fats) {
    const consumedFoodsList = document.getElementById('consumedFoodsList');
    const noFoodsMessage = document.getElementById('noFoodsMessage');
    
    if (noFoodsMessage) {
        noFoodsMessage.style.display = 'none';
    }
    
    const newRow = document.createElement('tr');
    newRow.className = 'consumed-food-item';
    newRow.innerHTML = `
        <td>${foodName}</td>
        <td>${calories} kcal</td>
        <td>${protein}g</td>
        <td>${carbs}g</td>
        <td>${fats}g</td>
        <td>${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</td>
        <td><span class="completed-badge">Completed</span></td>
    `;
    
    consumedFoodsList.insertBefore(newRow, consumedFoodsList.firstChild);
}

function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        border-radius: 4px;
        color: white;
        font-weight: bold;
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
        background-color: ${type === 'success' ? '#4CAF50' : '#f44336'};
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.opacity = '1';
    }, 100);
    
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
            document.body.removeChild(notification);
        }, 300);
    }, 3000);
}

// Chart initialization function
function initializeCharts() {
    // Nutrition Chart
    const nutritionCtx = document.getElementById('nutritionChart')?.getContext('2d');
    if (nutritionCtx) {
        new Chart(nutritionCtx, {
            type: 'bar',
            data: {
                labels: <%- JSON.stringify(nutritionChartData?.labels || []) %>,
                datasets: [{
                    label: 'Calories',
                    data: <%- JSON.stringify(nutritionChartData?.calories || []) %>,
                    backgroundColor: 'rgba(255, 99, 132, 0.7)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Protein (g)',
                    data: <%- JSON.stringify(nutritionChartData?.protein || []) %>,
                    backgroundColor: 'rgba(54, 162, 235, 0.7)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1,
                    yAxisID: 'y1'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: { display: true, text: 'Calories' }
                    },
                    y1: {
                        beginAtZero: true,
                        position: 'right',
                        title: { display: true, text: 'Protein (g)' },
                        grid: { drawOnChartArea: false }
                    }
                }
            }
        });
    }

    // Exercise Progress Chart
    const exerciseData = <%- JSON.stringify(exerciseProgress || []) %>;
    const exerciseCtx = document.getElementById('exerciseChart')?.getContext('2d');
    
    if (exerciseCtx && exerciseData.length > 0) {
        new Chart(exerciseCtx, {
            type: 'line',
            data: {
                labels: <%- JSON.stringify(exerciseProgress[0]?.history ? exerciseProgress[0].history.map(h => h.week) : ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5', 'Week 6']) %>,
                datasets: exerciseData.map(exercise => ({
                    label: exercise.name + ' (kg)',
                    data: exercise.history ? exercise.history.map(h => h.weight) : [],
                    borderColor: exercise.color || '#8A2BE2',
                    backgroundColor: (exercise.color || '#8A2BE2') + '33',
                    tension: 0.3,
                    fill: true
                }))
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: { color: '#f1f1f1' }
                    },
                    title: {
                        display: true,
                        text: 'Exercise Progress Over Time',
                        color: '#f1f1f1',
                        font: { size: 16 }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: { color: '#f1f1f1' },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    },
                    x: {
                        ticks: { color: '#f1f1f1' },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    }
                }
            }
        });
    }

    // Nutrition Doughnut Chart
    const nutritionDoughnutCtx = document.getElementById('nutritionDoughnutChart')?.getContext('2d');
    if (nutritionDoughnutCtx) {
        new Chart(nutritionDoughnutCtx, {
            type: 'doughnut',
            data: {
                labels: ['Protein', 'Carbs', 'Fats'],
                datasets: [{
                    data: [
                        <%= todayNutrition.macros?.protein || 35 %>,
                        <%= todayNutrition.macros?.carbs || 45 %>,
                        <%= todayNutrition.macros?.fats || 20 %>
                    ],
                    backgroundColor: ['#8A2BE2', '#32CD32', '#FF6347'],
                    hoverOffset: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: { color: '#f1f1f1' }
                    }
                }
            }
        });
    }

    // Calorie Chart
    const calorieCtx = document.getElementById('calorieChart')?.getContext('2d');
    if (calorieCtx) {
        new Chart(calorieCtx, {
            type: 'doughnut',
            data: {
                labels: ['Consumed', 'Remaining'],
                datasets: [{
                    data: [
                        <%= todayNutrition.calories_consumed || 0 %>,
                        <%= Math.max(0, user.fitness_goals.calorie_goal - (todayNutrition.calories_consumed || 0)) %>
                    ],
                    backgroundColor: ['#8A2BE2', 'rgba(255, 255, 255, 0.1)'],
                    borderWidth: 0,
                    hoverOffset: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '75%',
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: true }
                }
            }
        });
    }

    // Chart dropdown handlers
    const exerciseSelect = document.getElementById('exerciseSelect');
    const timeframeSelect = document.getElementById('timeframeSelect');

    if (exerciseSelect && timeframeSelect) {
        function updateCharts() {
            const selectedExercise = exerciseSelect.value;
            const selectedTimeframe = timeframeSelect.value;
            console.log('Update charts for:', selectedExercise, selectedTimeframe);
        }

        exerciseSelect.addEventListener('change', updateCharts);
        timeframeSelect.addEventListener('change', updateCharts);
    }
}
</script>

</body>

</html>