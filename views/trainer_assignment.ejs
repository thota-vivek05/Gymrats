<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GymRats - Assign Clients</title>
    <link rel="stylesheet" href="/trainer/trainer.css">
    <style>
        .assignment-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .filters {
            background: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .filter-group {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .users-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .user-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-left: 4px solid #8A2BE2;
        }
        
        .user-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .user-name {
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
        }
        
        .workout-type {
            background: #8A2BE2;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.9em;
        }
        
        .user-details {
            margin-bottom: 15px;
        }
        
        .detail-item {
            margin-bottom: 5px;
            font-size: 0.9em;
            color: #666;
        }
        
        .assign-btn {
            background: #8A2BE2;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background 0.3s;
        }
        
        .assign-btn:hover {
            background: #7B1FA2;
        }
        
        .assign-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .assign-btn.assigned {
            background: #4CAF50;
        }
        
        .no-users {
            text-align: center;
            padding: 40px;
            color: #666;
            font-size: 1.1em;
        }
        
        .back-link {
            display: inline-block;
            margin-bottom: 20px;
            color: #8A2BE2;
            text-decoration: none;
            font-weight: bold;
        }
        
        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <!-- Navigation (same as trainer.ejs) -->
    <div class="main-navbar">
        <header>
            <div class="brand-logo">
                <a href="/home" class="brand-name">GymRats</a>
            </div>
            <div class="nav-menu">
                <a href="/home">Home</a>
                <a href="/isolation">Exercises</a>
                <a href="/nutrition">Nutrition</a>
                <a href="/about">About</a>
                <a href="/contact">Contact</a>
            </div>
            <div class="right-container">
                <div class="login-button">
                    <a href="/trainer_login">Logout</a>
                </div>
            </div>
        </header>
    </div>

    <div class="assignment-container">
        <a href="/trainer" class="back-link">← Back to Dashboard</a>
        
        <div class="welcome-banner">
            <h1>Available Clients</h1>
            <p>Assign clients that match your specializations: <%= trainerSpecializations.join(', ') %></p>
        </div>

        <div class="filters">
            <div class="filter-group">
                <label for="workoutTypeFilter">Filter by Workout Type:</label>
                <select id="workoutTypeFilter" class="form-control">
                    <option value="all">All Types</option>
                    <% trainerSpecializations.forEach(type => { %>
                        <option value="<%= type %>"><%= type %></option>
                    <% }) %>
                </select>
                <button id="refreshBtn" class="btn">Refresh</button>
            </div>
        </div>

        <div id="usersContainer">
            <% if (typeof unassignedUsers !== 'undefined' && unassignedUsers.length > 0) { %>
                <div class="no-users">
                    <p>No unassigned clients available that match your specializations.</p>
                    <p>New clients will appear here as they sign up.</p>
                </div>
            <% } else { %>
                <div class="users-grid">
                    <% unassignedUsers.forEach(user => { %>
                        <div class="no-users">No unassigned clients available.</div>
                        <div class="user-card" data-user-id="<%= user._id %>" data-workout-type="<%= user.workout_type %>">
                            <div class="user-header">
                                <div class="user-name"><%= user.full_name %></div>
                                <div class="workout-type"><%= user.workout_type %></div>
                            </div>
                            <div class="user-details">
                                <div class="detail-item"><strong>Email:</strong> <%= user.email %></div>
                                <div class="detail-item"><strong>Joined:</strong> <%= new Date(user.created_at).toLocaleDateString() %></div>
                                <% if (user.weight && user.height) { %>
                                    <div class="detail-item"><strong>Stats:</strong> <%= user.weight %>kg, <%= user.height %>cm</div>
                                <% } %>
                                <% if (user.BMI) { %>
                                    <div class="detail-item"><strong>BMI:</strong> <%= user.BMI.toFixed(1) %></div>
                                <% } %>
                                <% if (user.fitness_goals && user.fitness_goals.weight_goal) { %>
                                    <div class="detail-item"><strong>Goal Weight:</strong> <%= user.fitness_goals.weight_goal %>kg</div>
                                <% } %>
                            </div>
                            <button class="assign-btn" onclick="assignUser('<%= user._id %>', this)">
                                Assign to Me
                            </button>
                        </div>
                    <% }) %>
                </div>
            <% } %>
        </div>
    </div>

    <script>
        // Filter users by workout type
        document.getElementById('workoutTypeFilter').addEventListener('change', function() {
            const selectedType = this.value;
            const userCards = document.querySelectorAll('.user-card');
            
            userCards.forEach(card => {
                if (selectedType === 'all' || card.dataset.workoutType === selectedType) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });

        // Refresh users list
        document.getElementById('refreshBtn').addEventListener('click', async function() {
            const filter = document.getElementById('workoutTypeFilter').value;
            try {
                const response = await fetch(`/trainer/unassigned-users?workoutType=${filter}`);
                const data = await response.json();
                
                if (data.success) {
                    updateUsersList(data.users);
                } else {
                    alert('Error refreshing users: ' + data.error);
                }
            } catch (error) {
                console.error('Error refreshing users:', error);
                alert('Error refreshing users');
            }
        });

        // Assign user to trainer
        async function assignUser(userId, button) {
            if (button.disabled) return;
            
            button.disabled = true;
            button.textContent = 'Assigning...';
            
            try {
                const response = await fetch('/trainer/assign-user', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ userId })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    button.textContent = 'Assigned ✓';
                    button.classList.add('assigned');
                    button.disabled = true;
                    
                    // Remove card after a delay
                    setTimeout(() => {
                        const card = button.closest('.user-card');
                        card.style.opacity = '0';
                        setTimeout(() => card.remove(), 300);
                    }, 1500);
                } else {
                    button.textContent = 'Assign to Me';
                    button.disabled = false;
                    alert('Error: ' + data.error);
                }
            } catch (error) {
                console.error('Error assigning user:', error);
                button.textContent = 'Assign to Me';
                button.disabled = false;
                alert('Error assigning user');
            }
        }

        // Update users list (for refresh functionality)
        function updateUsersList(users) {
            const container = document.getElementById('usersContainer');
            
            if (users.length === 0) {
                container.innerHTML = `
                    <div class="no-users">
                        <p>No unassigned clients available that match your specializations.</p>
                        <p>New clients will appear here as they sign up.</p>
                    </div>
                `;
                return;
            }
            
            let html = '<div class="users-grid">';
            users.forEach(user => {
                html += `
                    <div class="user-card" data-user-id="${user._id}" data-workout-type="${user.workout_type}">
                        <div class="user-header">
                            <div class="user-name">${user.full_name}</div>
                            <div class="workout-type">${user.workout_type}</div>
                        </div>
                        <div class="user-details">
                            <div class="detail-item"><strong>Email:</strong> ${user.email}</div>
                            <div class="detail-item"><strong>Joined:</strong> ${new Date(user.created_at).toLocaleDateString()}</div>
                            ${user.weight && user.height ? `<div class="detail-item"><strong>Stats:</strong> ${user.weight}kg, ${user.height}cm</div>` : ''}
                            ${user.BMI ? `<div class="detail-item"><strong>BMI:</strong> ${user.BMI.toFixed(1)}</div>` : ''}
                            ${user.fitness_goals && user.fitness_goals.weight_goal ? `<div class="detail-item"><strong>Goal Weight:</strong> ${user.fitness_goals.weight_goal}kg</div>` : ''}
                        </div>
                        <button class="assign-btn" onclick="assignUser('${user._id}', this)">
                            Assign to Me
                        </button>
                    </div>
                `;
            });
            html += '</div>';
            container.innerHTML = html;
        }
    </script>
</body>
</html>